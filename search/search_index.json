{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to nbreproduce Reproduce Jupyter Notebooks and projects inside Docker Containers (based on Jupyter Docker-Stacks images) using the nbreproduce CLI. Installation nbreproduce uses docker to execute notebooks and scripts in a containerised environment. Before installing nbreproduce install Docker using the instructions at Docker Desktop . Once you have successfully installed docker you can install nbreproduce using pip. $ pip install nbreproduce To check if you have installed nbreproduce properly you can execute the hello-world-notebook test. $ nbreproduce --url https://github.com/econ-ark/nbreproduce/blob/master/tests/hello_world.ipynb This will download a minimal example notebook hello_world.ipynb and save the a copy hello_world-reproduce.ipynb which is executed inside a docker container environment. To check the output, open up hello_world-reproduce.ipynb in a Jupyter Notebook/Lab instance or another notebook serving frontend like VSCode/PyCharm/nteract.","title":"Welcome to nbreproduce"},{"location":"#welcome-to-nbreproduce","text":"Reproduce Jupyter Notebooks and projects inside Docker Containers (based on Jupyter Docker-Stacks images) using the nbreproduce CLI.","title":"Welcome to nbreproduce"},{"location":"#installation","text":"nbreproduce uses docker to execute notebooks and scripts in a containerised environment. Before installing nbreproduce install Docker using the instructions at Docker Desktop . Once you have successfully installed docker you can install nbreproduce using pip. $ pip install nbreproduce To check if you have installed nbreproduce properly you can execute the hello-world-notebook test. $ nbreproduce --url https://github.com/econ-ark/nbreproduce/blob/master/tests/hello_world.ipynb This will download a minimal example notebook hello_world.ipynb and save the a copy hello_world-reproduce.ipynb which is executed inside a docker container environment. To check the output, open up hello_world-reproduce.ipynb in a Jupyter Notebook/Lab instance or another notebook serving frontend like VSCode/PyCharm/nteract.","title":"Installation"},{"location":"projects/","text":"Reproduce - Notebooks You can use nbreproduce to execute individual Jupyter notebooks locally on your machine inside a docker environment. Jupyter Notebooks can be distributed as individual files/URLs with the name of the docker image it needs to be reproduced consistently. nbreproduce will create a new notebook with the suffix -reproduce.ipynb in the current directory. To check the outputs you can open the reproduced notebooks using your favourite notebook frontend, JupyterLab/nteract/VSCode/PyCharm... Local Notebooks You can reproduce local notebooks by linking a docker image which is requried to build the environment. $ nbreproduce --docker DOCKER_IMAGE name_of_notebook.ipynb You wouldn't have to provide the DOCKER_IMAGE option after the first run as it is saved inside the notebook metadata (look for the tag name docker_image ). If you share this notebook users wouldn't need to use --docker DOCKER_IMAGE while reproducing the notebook. To reproduce a notebook which already has a docker_image tag in the metadata of the notebook. $ nbreproduce name_of_notebook.ipynb URL Notebooks NOTE: This currently only works with GitHub URL links and docker images on DockerHub. nbreproduce can be used in combination with a GitHub link of a Jupyter Notebook with a linked docker image. To fetch a notebook and run it inside a docker container: $ nbreproduce --docker DOCKER_IMAGE --url LINK_TO_URL As an example to test if everything works locally you can test with a sample notebook hosted at https://github.com/econ-ark/nbreproduce/blob/master/tests/hello_world.ipynb . $ nbreproduce --docker jupyter/scipy-notebook:latest --url https://github.com/econ-ark/nbreproduce/blob/master/tests/hello_world.ipynb","title":"Reproduce - Notebooks"},{"location":"projects/#reproduce-notebooks","text":"You can use nbreproduce to execute individual Jupyter notebooks locally on your machine inside a docker environment. Jupyter Notebooks can be distributed as individual files/URLs with the name of the docker image it needs to be reproduced consistently. nbreproduce will create a new notebook with the suffix -reproduce.ipynb in the current directory. To check the outputs you can open the reproduced notebooks using your favourite notebook frontend, JupyterLab/nteract/VSCode/PyCharm...","title":"Reproduce - Notebooks"},{"location":"projects/#local-notebooks","text":"You can reproduce local notebooks by linking a docker image which is requried to build the environment. $ nbreproduce --docker DOCKER_IMAGE name_of_notebook.ipynb You wouldn't have to provide the DOCKER_IMAGE option after the first run as it is saved inside the notebook metadata (look for the tag name docker_image ). If you share this notebook users wouldn't need to use --docker DOCKER_IMAGE while reproducing the notebook. To reproduce a notebook which already has a docker_image tag in the metadata of the notebook. $ nbreproduce name_of_notebook.ipynb","title":"Local Notebooks"},{"location":"projects/#url-notebooks","text":"NOTE: This currently only works with GitHub URL links and docker images on DockerHub. nbreproduce can be used in combination with a GitHub link of a Jupyter Notebook with a linked docker image. To fetch a notebook and run it inside a docker container: $ nbreproduce --docker DOCKER_IMAGE --url LINK_TO_URL As an example to test if everything works locally you can test with a sample notebook hosted at https://github.com/econ-ark/nbreproduce/blob/master/tests/hello_world.ipynb . $ nbreproduce --docker jupyter/scipy-notebook:latest --url https://github.com/econ-ark/nbreproduce/blob/master/tests/hello_world.ipynb","title":"URL Notebooks"},{"location":"scripts/","text":"Reproduce - Bash Projects nbreproduce can also be used to reproduced whole projects which has an entry bash script. (Just like a make file) The only requirement is to have an entry bash script which contains all the required steps to reproduce the project. An example bash script could be something like: # clean data python clean_data.py # generate figure python generate_figures.py # build latex paper pdflatex latex/paper.tex nbreproduce mounts the current directory inside a docker container created using the docker image name provided. To reproduce a project with a docker image and bash script: $ nbreproduce --docker DOCKER_IMAGE name_of_bash_script.sh nbreproduce by default looks for a bash script with the name reproduce.sh . If the bash script is reproduce.sh then just providing the name of the docker image is enough to execute nbreproduce in the current directory. $ nbreproduce --docker DOCKER_IMAGE By default the docker image points to econark/econ-ark-notebook:latest which builds on top of jupyter/scipy-notebook by adding latex and econ-ark . Example As an example, we will look at a replication of the paper Cocco, Gomes, & Maenhout (2005), \"Consumption and Portfolio Choice Over the Life Cycle\". The code is available at https://github.com/econ-ark/REMARK/tree/master/REMARKs/CGMPortfolio . To reproduce the contents of this paper we can use nbreproduce to run the code inside a docker environment and get consistent results. # Clone the repository from GitHub $ git clone https://github.com/econ-ark/REMARK # navigate to CGMPortfolio $ cd REMARKS/CGMPortfolio # check if reproduce.sh already exists in the current directory $ ls ... ... ... reproduce.sh ... ... # Use nbreproduce to reproduce the content in this repository. $ nbreproduce Executing reproduce.sh in the current directory /Users/ms/dev/REMARK/REMARKs/CGMPortfolio using the econark/econ-ark-notebook:latest docker image. Executing the script inside econark/econ-ark-notebook:latest container. Using matplotlib backend: agg 1. Solve the model and display its policy functions 2. Simulate the lives of a few agents to show the implied income and stockholding processes. 3. Run a larger simulation to display the age conditional means of variables of interest. 4. Solve and compare policy functions with those obtained from CGM's Fortran 90 code 5. Present more detailed figures on discrepancies for the last periods of life. 6. Use HARK to compare the limiting MPC to the theoretical result obtained when there is no income risk and no riskless asset. 7. Turn off all shocks and check if consumption converges to its analytical perfect foresight solution We didn't provide a docker image name in the nbreproduce command as we want to create the docker container using the default ( econark/econ-ark-notebook:latest ) image. We could have provided a different image and a different bash script: $ nbreproduce --docker econark/econ-ark-notebook:0.10.7 custom_reproduce_script.sh","title":"Reproduce - Bash Projects"},{"location":"scripts/#reproduce-bash-projects","text":"nbreproduce can also be used to reproduced whole projects which has an entry bash script. (Just like a make file) The only requirement is to have an entry bash script which contains all the required steps to reproduce the project. An example bash script could be something like: # clean data python clean_data.py # generate figure python generate_figures.py # build latex paper pdflatex latex/paper.tex nbreproduce mounts the current directory inside a docker container created using the docker image name provided. To reproduce a project with a docker image and bash script: $ nbreproduce --docker DOCKER_IMAGE name_of_bash_script.sh nbreproduce by default looks for a bash script with the name reproduce.sh . If the bash script is reproduce.sh then just providing the name of the docker image is enough to execute nbreproduce in the current directory. $ nbreproduce --docker DOCKER_IMAGE By default the docker image points to econark/econ-ark-notebook:latest which builds on top of jupyter/scipy-notebook by adding latex and econ-ark .","title":"Reproduce - Bash Projects"},{"location":"scripts/#example","text":"As an example, we will look at a replication of the paper Cocco, Gomes, & Maenhout (2005), \"Consumption and Portfolio Choice Over the Life Cycle\". The code is available at https://github.com/econ-ark/REMARK/tree/master/REMARKs/CGMPortfolio . To reproduce the contents of this paper we can use nbreproduce to run the code inside a docker environment and get consistent results. # Clone the repository from GitHub $ git clone https://github.com/econ-ark/REMARK # navigate to CGMPortfolio $ cd REMARKS/CGMPortfolio # check if reproduce.sh already exists in the current directory $ ls ... ... ... reproduce.sh ... ... # Use nbreproduce to reproduce the content in this repository. $ nbreproduce Executing reproduce.sh in the current directory /Users/ms/dev/REMARK/REMARKs/CGMPortfolio using the econark/econ-ark-notebook:latest docker image. Executing the script inside econark/econ-ark-notebook:latest container. Using matplotlib backend: agg 1. Solve the model and display its policy functions 2. Simulate the lives of a few agents to show the implied income and stockholding processes. 3. Run a larger simulation to display the age conditional means of variables of interest. 4. Solve and compare policy functions with those obtained from CGM's Fortran 90 code 5. Present more detailed figures on discrepancies for the last periods of life. 6. Use HARK to compare the limiting MPC to the theoretical result obtained when there is no income risk and no riskless asset. 7. Turn off all shocks and check if consumption converges to its analytical perfect foresight solution We didn't provide a docker image name in the nbreproduce command as we want to create the docker container using the default ( econark/econ-ark-notebook:latest ) image. We could have provided a different image and a different bash script: $ nbreproduce --docker econark/econ-ark-notebook:0.10.7 custom_reproduce_script.sh","title":"Example"}]}